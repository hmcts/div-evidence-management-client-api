import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.3.9.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath('info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2') {
            exclude(group: 'org.pitest')
        }
        classpath('org.pitest:pitest-command-line:1.6.2')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.3.10")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'info.solidsoft.pitest' version '1.5.2'
    id 'org.owasp.dependencycheck' version '6.1.1'
    id 'org.sonarqube' version '3.0'
    id 'org.springframework.boot' version '2.3.9.RELEASE'
    id 'au.com.dius.pact' version '4.1.0'
}

def versions = [
        bouncycastle                            : '1.61',
        commonsIo                               : '2.7',
        commonsLang3                            : '3.9',
        guava                                   : '30.0-jre',
        hibernate                               : '6.0.17.Final',
        httpComponents                          : '4.5.13',
        jacksonCore                             : '2.10.2',
        jacksonDatabind                         : '2.11.0',
        javaxValidation                         : '2.0.0.Final',
        jaywayJsonPath                          : '2.4.0',
        jsr305                                  : '3.0.2',
        junit                                   : '4.13.1',
        lombok                                  : '1.18.12',
        pact_version                            : '4.1.7',
        puppyCrawl                              : '8.29',
        reformPropertiesVolume                  : '0.0.4',
        reformsJavaLogging                      : '5.1.7',
        restAssured                             : '3.3.0',
        serenity                                : '2.1.2',
        serenityCucumber                        : '1.9.51',
        serviceTokenGenerator                   : '3.0.0',
        skyscreamer                             : '1.2.3',
        springBoot                              : '2.3.9.RELEASE',
        springCloud                             : '2.2.5.RELEASE',
        springfoxSwagger                        : '2.9.2',
        springHateoas                           : '0.25.2.RELEASE',
        springPluginCore                        : '1.2.0.RELEASE',
        springRetry                             : '1.2.5.RELEASE',
        springSecurityCrypto                    : '5.4.5',
        spring_security_rsa                     : '1.0.9.RELEASE',
        tomcat                                  : '9.0.43',
        unirestJava                             : '1.4.9',
        wiremockVersion                         : '2.25.1'
]

apply plugin: 'checkstyle'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '3.0.0'
sourceCompatibility = 11
targetCompatibility = 11
jar.archiveName = 'div-evidence-management-client-api.jar'

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName 'div-evidence-management-client-api.jar'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

dependencies {
    integrationTestImplementation(sourceSets.test.output)
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

mainClassName = 'uk.gov.hmcts.reform.emclient.application.EvidenceManagementClientApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenLocal()
    jcenter()

    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
    dependencies {
        //CVE-2017-18640
        dependency group: 'org.yaml',name: 'snakeyaml', version: '1.28'

        dependency group: 'com.netflix.servo',name: 'servo-core', version: '0.13.0'
    }

}

distributions {
  main {
    contents {
      from(file("$projectDir/lib/AI-Agent.xml")) {
        into "lib"
      }
    }
  }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

pitest {
    targetClasses = [
            'uk.gov.hmcts.reform.emclient.service.*',
            'uk.gov.hmcts.reform.emclient.validation.*',
            'uk.gov.hmcts.reform.emclient.idam.*',
            'uk.gov.hmcts.reform.emclient.errorhandler.*',
            'uk.gov.hmcts.reform.emclient.controller.*'
    ]
    excludedClasses = ['uk.gov.hmcts.reform.emclient.health.*', 'uk.gov.hmcts.reform.emclient.configuration.*', 'uk.gov.hmcts.reform.emclient.response.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 50
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configFile = new File(rootDir, "checkstyle.xml")
}
// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}


dependencies {

    //integration test
    integrationTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirestJava
    integrationTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestImplementation group: 'junit', name: 'junit', version: versions.junit
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestImplementation group: 'org.skyscreamer', name:'jsonassert', version: versions.skyscreamer
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    integrationTestImplementation group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jacksonCore
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jacksonDatabind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jacksonCore
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: versions.jsr305
    implementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jaywayJsonPath
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    implementation group: 'javax.validation', name: 'validation-api', version: versions.javaxValidation
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: versions.hibernate
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springCloud
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-ribbon', version: versions.springCloud
    implementation group: 'org.springframework.hateoas', name: 'spring-hateoas', version: versions.springHateoas
    implementation group: 'org.springframework.plugin', name: 'spring-plugin-core', version: versions.springPluginCore
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: versions.springRetry
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: versions.bouncycastle

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents

    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
    implementation (group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformsJavaLogging){
        exclude group: 'org.apache.httpcomponents', 'module': 'httpclient'
    }
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume

    implementation (group: 'com.google.guava', name: 'guava', version: versions.guava) {
        force = true
    }

    implementation (group: 'org.apache.tomcat.embed', name:'tomcat-embed-core', version: versions.tomcat) {
        force = true
    }
    implementation (group: 'org.apache.tomcat.embed', name:'tomcat-embed-websocket', version: versions.tomcat) {
        force = true
    }
    implementation (group: 'org.apache.tomcat.embed', name:'tomcat-embed-el', version: versions.tomcat) {
        force = true
    }

    implementation (group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign',  version: versions.springCloud) {
        exclude group: 'io.reactivex', module: 'io.reactivex'
        exclude group: 'io.reactivex', module: 'rxnetty'
        exclude group: 'io.reactivex', module: 'rxnetty-contexts'
        exclude group: 'io.reactivex', module: 'rxnetty-servo'
        exclude group: 'org.bouncycastle'
    }

    implementation (group:  'org.springframework.security', name: 'spring-security-rsa', version: versions.spring_security_rsa) {
        force = true
    }

    implementation (group: 'org.springframework.security', name:'spring-security-crypto', version: versions.springSecurityCrypto) {
        force = true
    }

    implementation (group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator){
        exclude group: 'io.reactivex', module: 'io.reactivex'
        exclude group: 'io.reactivex', module: 'rxnetty'
        exclude group: 'io.reactivex', module: 'rxnetty-contexts'
        exclude group: 'io.reactivex', module: 'rxnetty-servo'
    }

    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremockVersion
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.sprintBoot) {
        exclude(module: 'commons-logging')
    }
    //pact
    contractTestCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    contractTestCompile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: versions.httpComponents
    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath
}

test {
    exclude '**/*FunctionalTest.class'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.emclient.category.SmokeTest'
    }
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    environment "http_proxy", "http://proxyout.reform.hmcts.net:8080"
    doFirst() {
        main = bootJar.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperty 'spring.profiles.active', 'aat'
        systemProperty 'http.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'http.proxyPort', '8080'
        systemProperty 'https.proxyHost', 'proxyout.reform.hmcts.net'
        systemProperty 'https.proxyPort', '8080'
    }
}

task functional(type: Test, description: 'Runs the functional tests', group: 'Verification') {
        setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
        setClasspath(sourceSets.integrationTest.runtimeClasspath)

        finalizedBy aggregate
}

task printVersion {
    doLast {
        print project.version
    }
}

task developAddReleaseSuffix() {
    version = "${version}-SNAPSHOT"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
        '**uk/gov/hmcts/reform/emclient/exception/*',
        '**uk/gov/hmcts/reform/emclient/configuration/*',
        '**uk/gov/hmcts/reform/emclient/response/*',
        '**uk/gov/hmcts/reform/emclient/service/UploadRequestBuilder.java',
        '**uk/gov/hmcts/reform/emclient/exception/TemporaryStoreFailureException.java',
        '**uk/gov/hmcts/reform/emclient/application/EvidenceManagementClientApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectKey", "DivorceEvidenceManagementClientApi"
        property "sonar.projectName", "Divorce :: Evidence Management Client API"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"

    }
}

task addReleaseSuffixToDevelop() {
    version = "${version}-SNAPSHOT"
}

task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/divorce/emclient/**"
}

task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'build/pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}
